import { Buffer } from 'buffer';
export declare const IPES_ipv4Regex: RegExp;
export declare const IPES_ipv6Regex: RegExp;
declare function IPES_isV4Format(ip: string): boolean;
declare function IPES_isV6Format(ip: string): boolean;
declare function IPES_toBuffer(ip: string, buff?: Buffer, offset?: number): Buffer;
declare function IPES_toString(buff: Buffer, offset?: number, length?: number): string;
declare function IPES__normalizeFamily(family: string): string;
declare function IPES_fromPrefixLen(prefixlen: number, family?: string): string;
declare function IPES_mask(addr: string, mask: string): string;
declare function IPES_cidr(cidrString: string): string;
declare function IPES_toLong(ip: string): number;
declare function IPES_fromLong(ipl: number): string;
declare function IPES_subnet(addr: string, mask: string): {
    networkAddress: string;
    firstAddress: string;
    lastAddress: string;
    broadcastAddress: string;
    subnetMask: string;
    subnetMaskLength: number;
    numHosts: number;
    length: number;
    contains(other: string): boolean;
};
declare function IPES_cidrSubnet(cidrString: string): {
    networkAddress: string;
    firstAddress: string;
    lastAddress: string;
    broadcastAddress: string;
    subnetMask: string;
    subnetMaskLength: number;
    numHosts: number;
    length: number;
    contains(other: string): boolean;
};
declare function IPES_not(addr: string): string;
declare function IPES_or(a: string, b: string): string;
declare function IPES_isEqual(a: string, b: string): boolean;
declare function IPES_isPrivate(addr: string): boolean;
declare function IPES_isPublic(addr: string): boolean;
declare function IPES_isLoopback(addr: string): boolean;
declare function IPES_loopback(family: string): string;
declare function IPES_address(name?: string, family?: string): any;
export { IPES_ipv4Regex as ipv4Regex, IPES_ipv6Regex as ipv6Regex, IPES_isV4Format as isV4Format, IPES_isV6Format as isV6Format, IPES_toBuffer as toBuffer, IPES_toString as toString, IPES__normalizeFamily as _normalizeFamily, IPES_fromPrefixLen as fromPrefixLen, IPES_mask as mask, IPES_cidr as cidr, IPES_toLong as toLong, IPES_fromLong as fromLong, IPES_subnet as subnet, IPES_cidrSubnet as cidrSubnet, IPES_not as not, IPES_or as or, IPES_isEqual as isEqual, IPES_isPrivate as isPrivate, IPES_isPublic as isPublic, IPES_isLoopback as isLoopback, IPES_loopback as loopback, IPES_address as address };
